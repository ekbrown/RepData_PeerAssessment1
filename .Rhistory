microbenchmark::microbenchmark(
v1 <- exactMatches(pattern, string, pcre = T, case.sens = F),
v2 <- exact_matches_fast(pattern, string, pcre = T, case.sens = F),
times, 10
)
identical(v1, v2)
microbenchmark::microbenchmark(
v1 <- exactMatches(pattern, string, pcre = T, case.sens = F),
v2 <- exact_matches_fast(pattern, string, pcre = T, case.sens = F),
times = 10
)
identical(v1, v2)
source("/Users/earlbrown/Documents/_qclwr/fn_kwic.R")
source("/Users/earlbrown/Documents/_qclwr/fn_kwic_fast.R")
microbenchmark::microbenchmark(
v1 <- exactMatches(pattern, string, pcre = T, case.sens = F),
v2 <- exact_matches_fast(pattern, string, pcre = T, case.sens = F),
times = 10
)
identical(v1, v2)
lines.around!=0
microbenchmark::microbenchmark(
v1 <- gsub("(^ {1,}| {1,}$)", "", lines.with.delimited.matches, perl=TRUE),
v2 <- str_trim(lines.with.delimited.matches),
times = 10
)
identical(v1, v2)
v1
v2
setdiff(v1, v2)
microbenchmark::microbenchmark(
v1 <- gsub("(^ {1,}| {1,}$)", "", lines.with.delimited.matches, perl=TRUE),
v2 <- str_replace_all(lines.with.delimited.matches, "(^ {1,}| {1,}$)", ""),
times = 10
)
identical(v1, v2)
source("/Users/earlbrown/Documents/_qclwr/fn_kwic.R")
source("/Users/earlbrown/Documents/_qclwr/fn_kwic_fast.R")
microbenchmark::microbenchmark(
v1 <- exactMatches(pattern, string, pcre = T, case.sens = F),
v2 <- exact_matches_fast(pattern, string, pcre = T, case.sens = F),
times = 10
)
identical(v1, v2)
microbenchmark::microbenchmark(
v1 <- exactMatches(pattern, string, pcre = T, case.sens = F),
v2 <- exact_matches_fast(pattern, string, pcre = T, case.sens = F),
times = 100
)
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
470/9.67
v1
v2
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
head(v1)
head(v2)
293/26
length(corpus)
Rcpp::sourceCpp('Desktop/substring.cpp')
Rcpp::sourceCpp('Desktop/substring.cpp')
2578.8856/269.52
install.packages("rPython")
library("rPython")
python.load("/Users/earlbrown/Desktop/test.py")
python.load("/Users/earlbrown/Desktop/test.py")
mylist <- python.get("myList")
mylist
class(mylist)
help(package="rPython")
corpus <- c("some", "words", "whatever", "they", "may", "be")
python.assign(to_tag, corpus)
?python.assign
corpus <- c("some", "words", "whatever", "they", "may", "be")
python.assign(totag, corpus)
python.assign("totag", corpus)
first = c("subj", "verb", "subj", "verb", "verb", "verb", "subj")
first
df <- data.frame(
year = c(800, 850, 900, 1300, 1350, 1400, 1900, 1950, 2000),
first = c("subj", "verb", "subj", "verb", "verb", "verb", "subj", "verb", "verb")
)
year = c(800, 850, 900, 1300, 1350, 1400, 1900, 1950, 2000)
first = c("subj", "verb", "subj", "verb", "verb", "verb", "subj", "verb", "verb")
length(year)
length(first)
library("dplyr")
words <- c("casa", "árbol", "zona", "órgano")
df1 <- data.frame(words)
df1 %>% arrange(words)
df2 <- data_frame(words)
df2 %>% arrange(words)
df1 <- data.frame(as.character(words))
df1 %>% arrange(words)
df1 <- data.frame(words)
df1 %>% arrange(words)
start <- hm("10:03 am")
end <- hm("10:13 am")
end - start
library("lubridate")
start <- hm("10:03 am")
end <- hm("10:13 am")
end - start
start <- hm("10:03 am")
end <- hm("10:41 am")
end - start
Rcpp::sourceCpp('Documents/Computer_languages/Rcpp/sorting.cpp')
words <- c("casa", "árbol", "zona", "órgano")
class(words)
sort(words)
class(words)
library("dplyr")
words <- c("casa", "árbol", "zona", "órgano")
df1 <- data.frame(words)
df1 %>% arrange(words)
df2 <- data_frame(words)
df2 %>% arrange(words)
df
df2
str(df2)
describe(df2)
glimpse(df2)
df2 %>% arrange(words)
sort(df2$words)
arrange
arrange_
methods(arrange_)
arrange_.tbl_df
df2$words
class(df2$words)
sort(as.factor(df2$words))
library("dplyr")
words <- c("casa", "árbol", "zona", "órgano")
df1 <- data.frame(words)
df1 %>% arrange(words)
df2 <- data_frame(words)
df2 %>% arrange(words)
sort(df2$words)
sort(as.factor(df2$words))
df2 %>% arrange(as.factor(words))
df2 %>% arrange(words)
df2 %>% arrange(as.character(words))
df2 %>% arrange(words)
df2 %>% arrange(as.character(words))
df2 %>% arrange(as.factor(words))
sort(df2$words)
sort(as.factor(df2$words))
library("dplyr")
words <- c("casa", "árbol", "zona", "órgano")
df1 <- data.frame(words)
df1 %>% arrange(words)
df2 <- data_frame(words)
df2 %>% arrange(words)
df2 %>% arrange(as.character(words))
df2 %>% arrange(as.factor(words))
sort(df2$words)
sort(as.factor(df2$words))
library("dplyr")
words <- c("casa", "árbol", "zona", "órgano")
df2 %>% arrange(as.factor(words))
library("dplyr")
words <- c("casa", "árbol", "zona", "órgano")
df2 <- data_frame(words)
df2 %>% arrange(as.factor(words))
sort(df2$words)
Sys.getlocale
Sys.getlocale()
library("devtools")
install_github("hadley/dplyr")
library("dplyr")
words <- c("casa", "árbol", "zona", "órgano")
df1 <- data.frame(words)
df1 %>% arrange(words)
df2 <- data_frame(words)
df2 %>% arrange(words)
library("microbenchmark")
microbenchmark(
df1 %>% arrange(words),
df2 %>% arrange(words),
times = 10
)
words <- c("casa", "árbol", "zona", "órgano")
words <- rep(words, 100000)
df1 <- data.frame(words)
df2 <- data_frame(words)
microbenchmark(
df1 %>% arrange(words),
df2 %>% arrange(words),
times = 10
)
sessionInfo()
x <- rnorm(n = 100, mean = 50, sd = 1)
plot(x)
x <- rnorm(n = 100, mean = 50, sd = 1)
y <- seq(1, 100)
plot(x, y)
plot(x, y, xlim = c(0, 100))
x <- rnorm(n = 100, mean = 50, sd = 10)
y <- seq(1, 100)
plot(x, y, xlim = c(0, 100))
x <- rnorm(n = 100, mean = 50, sd = 45)
y <- seq(1, 100)
plot(x, y, xlim = c(0, 100))
abline(x = 50)
abline(v = 50)
x <- rnorm(n = 100, mean = 50, sd = 20)
y <- seq(1, 100)
plot(x, y, xlim = c(0, 100))
x <- rnorm(n = 100, mean = 50, sd = 20)
y <- seq(1, 100)
plot(x, y, xlim = c(0, 100))
abline(v = 50, col = "red")
x <- rnorm(n = 100, mean = 50, sd = 10)
y <- seq(1, 100)
plot(x, y, xlim = c(0, 100))
abline(v = 50, col = "red")
rbinom(n = 10, size = 2, prob = 0.5)
rbinom(n = 10, size = 1, prob = 0.5)
sample(1:10, replace = T)
sample(0:1, replace = T)
sample(0:1, size = 10, replace = T)
rbinom(n = 10, size = 1, prob = 0.5)
sample(0:1, size = 10, replace = T)
words <- c("hola", "qué", "tal", "cómo", "te", "ha", "ido")
words <- rep(words, 100000)
collector <- rep(NA, length(words))
one_way <- function(input) {
output <- rep(NA, length(words))
for (i in 1:length(input)) {
output[i] <- nchar(input[i])
}
return(output)
}
words <- c("hola", "qué", "tal", "cómo", "te", "ha", "ido")
one_way(words)
another_way <- function(input) {
output <- c()
for (i in 1:length(input)) {
output <- append(output, nchar(input[i]))
}
return(output)
}
another_way(words)
one_way(words)
another_way(words)
words <- c("hola", "qué", "tal", "cómo", "te", "ha", "ido")
words <- rep(words, 100000)
one_way <- function(input) {
output <- rep(NA, length(words))
for (i in 1:length(input)) {
output[i] <- nchar(input[i])
}
return(output)
}
another_way <- function(input) {
output <- c()
for (i in 1:length(input)) {
output <- append(output, nchar(input[i]))
}
return(output)
}
microbenchmark::microbenchmark(
one_way(words),
another_way(words),
times = 10
)
words <- c("hola", "qué", "tal", "cómo", "te", "ha", "ido")
words <- rep(words, 1000)
microbenchmark::microbenchmark(
one_way(words),
another_way(words),
times = 10
)
words <- c("hola", "qué", "tal", "cómo", "te", "ha", "ido")
words <- rep(words, 10000)
one_way <- function(input) {
output <- rep(NA, length(words))
for (i in 1:length(input)) {
output[i] <- nchar(input[i])
}
return(output)
}
another_way <- function(input) {
output <- c()
for (i in 1:length(input)) {
output <- append(output, nchar(input[i]))
}
return(output)
}
microbenchmark::microbenchmark(
one_way(words),
another_way(words),
times = 10
)
10482/171
words <- c("hola", "qué", "tal", "cómo", "te", "ha", "ido")
words <- rep(words, 1000)
fast_way <- function(input) {
output <- rep(NA, length(words))
for (i in 1:length(input)) {
output[i] <- nchar(input[i])
}
return(output)
}
slow_way <- function(input) {
output <- c()
for (i in 1:length(input)) {
output <- append(output, nchar(input[i]))
}
return(output)
}
microbenchmark::microbenchmark(
v1 <- one_way(words),
v2 <- another_way(words),
times = 10
)
identical(v1, v2)
107/16
words <- c("hola", "qué", "tal", "cómo", "te", "ha", "ido")
words <- rep(words, 1000)
fast_way <- function(input) {
output <- rep(NA, length(words))
for (i in 1:length(input)) {
output[i] <- nchar(input[i])
}
return(output)
}
slow_way <- function(input) {
output <- c()
for (i in 1:length(input)) {
output <- append(output, nchar(input[i]))
}
return(output)
}
microbenchmark::microbenchmark(
v1 <- fast_way(words),
v2 <- slow_way(words),
times = 10
)
identical(v1, v2)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("foreach")
library("foreach")
words <- c("estoy", "en", "la", "cama", "con", "mi", "esposa")
words <- c("hola", "qué", "tal", "cómo", "te", "ha", "ido")
fast_way <- function(input) {
output <- rep(NA, length(words))
for (i in 1:length(input)) {
output[i] <- nchar(input[i])
}
return(output)
}
slow_way <- function(input) {
output <- c()
for (i in 1:length(input)) {
output <- append(output, nchar(input[i]))
}
return(output)
}
foreach(i = words) %do% (nchar(i))
foreach(i = words, .combine = "c") %do% (nchar(i))
third_way <- function(input) {
foreach(i = input, .combine = "c") %do% (nchar(i))
}
words <- c("hola", "qué", "tal", "cómo", "te", "ha", "ido")
words <- rep(words, 1000)
fast_way <- function(input) {
output <- rep(NA, length(words))
for (i in 1:length(input)) {
output[i] <- nchar(input[i])
}
return(output)
}
slow_way <- function(input) {
output <- c()
for (i in 1:length(input)) {
output <- append(output, nchar(input[i]))
}
return(output)
}
third_way <- function(input) {
foreach(i = input, .combine = "c") %do% (nchar(i))
}
microbenchmark::microbenchmark(
v1 <- fast_way(words),
v2 <- slow_way(words),
v3 <- third_way(words),
times = 10
)
identical(v1, v2)
identical(v2, v3)
third_way <- function(input) {
foreach(i = input, .combine = "c") %dopar% (nchar(i))
}
words <- c("hola", "qué", "tal", "cómo", "te", "ha", "ido")
words <- rep(words, 100)
fast_way <- function(input) {
output <- rep(NA, length(words))
for (i in 1:length(input)) {
output[i] <- nchar(input[i])
}
return(output)
}
slow_way <- function(input) {
output <- c()
for (i in 1:length(input)) {
output <- append(output, nchar(input[i]))
}
return(output)
}
third_way <- function(input) {
foreach(i = input, .combine = "c") %dopar% (nchar(i))
}
microbenchmark::microbenchmark(
v1 <- fast_way(words),
v2 <- slow_way(words),
v3 <- third_way(words),
times = 10
)
identical(v1, v2)
identical(v2, v3)
source('~/.active-rstudio-document', echo=TRUE)
v4
words <- c("hola", "qué", "tal", "cómo", "te", "ha", "ido")
words <- rep(words, 10)
microbenchmark::microbenchmark(
v1 <- fast_way(words),
v2 <- slow_way(words),
v3 <- third_way(words),
v4 <- fourth_way(words),
times = 10
)
third_way <- function(input) {
foreach(i = input, .combine = "c") %do% (nchar(i))
}
microbenchmark::microbenchmark(
v1 <- fast_way(words),
v2 <- slow_way(words),
v3 <- third_way(words),
v4 <- fourth_way(words),
times = 10
)
fourth_way <- function(input) {
lapply(input, nchar)
}
microbenchmark::microbenchmark(
v1 <- fast_way(words),
v2 <- slow_way(words),
v3 <- third_way(words),
v4 <- fourth_way(words),
times = 10
)
fourth_way <- function(input) {
unlist(lapply(input, nchar))
}
microbenchmark::microbenchmark(
v1 <- fast_way(words),
v2 <- slow_way(words),
v3 <- third_way(words),
v4 <- fourth_way(words),
times = 10
)
setwd("/Users/earlbrown/coursera/reprod/RepData_PeerAssessment1")
movement <- read.table("activity.csv", sep = ",", header = T)
suppressPackageStartupMessages(library("dplyr"))
library("ggplot2")
head(movement)
movement %>% group_by(interval) %>% summarise(mean(steps))
movement %>% group_by(interval) %>% summarise(mean(steps)) %>% as.data.frame
movement %>% group_by(interval) %>% summarise(mean(steps, na.rm = T)) %>% as.data.frame
movement %>% group_by(interval) %>% summarise(mean_steps = mean(steps, na.rm = T)) %>%
movement %>% group_by(interval) %>% summarise(mean_steps = mean(steps, na.rm = T))
movement %>% group_by(interval) %>% summarise(mean_steps = mean(steps, na.rm = T))
movement %>% group_by(interval) %>% summarise(mean_steps = mean(steps, na.rm = T)) %>% ggplot(aes(interval, mean_steps)) + geom_point() + geom_line()
movement %>% group_by(interval) %>% summarise(mean_steps = mean(steps, na.rm = T)) %>% ggplot(aes(interval, mean_steps)) + geom_point() + geom_line() + theme_bw() + ggtitle("Mean steps by time interval")
movement %>% group_by(interval) %>% summarise(mean_steps = mean(steps, na.rm = T)) %>% ggplot(aes(interval, mean_steps)) + geom_point() + geom_line() + theme_bw() + ggtitle("Mean steps by time interval") + xlab("Time interval")
movement %>% group_by(interval) %>% summarise(mean_steps = mean(steps, na.rm = T)) %>% ggplot(aes(interval, mean_steps)) + geom_point() + geom_line() + theme_bw() + ggtitle("Mean steps by time interval") + xlab("Time interval") + ylab("Mean steps")
mean_steps_by_interval <- movement %>% group_by(interval) %>% summarise(mean_steps = mean(steps, na.rm = T))
mean_steps_by_interval
mean_steps_by_interval %>% summarise(max(mean_steps))
mean_steps_by_interval %>% filter(mean_steps == max(mean_steps))
mean_steps_by_interval %>% filter(mean_steps == max(mean_steps)) %>% select(interval)
24/60
24*60
1440/5
12*24
